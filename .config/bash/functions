# vim: filetype=bash
#
#
CDRIP_TOOLS_PREFIX="${HOME}/dev/cdrip-tools"
# use arverify to verify accuraterip checksums of flac files in a directory
function arv {
    local dir=${@:-$PWD}
    local logfile="${dir}"/accuraterip.log
    local out=$(${CDRIP_TOOLS_PREFIX}/arverify.py -v "${dir}"/*.flac)
    # early exit if arverify command did not work
    # this will occur when the out variable contains only 2 lines
    if [ "$(echo "$out" | wc -l)" == "2" ]; then
        return 1
    fi
    # cleanup and remove path names in log file
    local IFS_BAK=$IFS
    IFS=$'\n'
    for i in $out; do
        if [[ "$i" =~ ".flac" ]]; then
            echo "" >> $logfile
            basename "$i" >> $logfile
        else
            echo "$i" >> $logfile
        fi
    done
    IFS=$IFS_BAK
}


# sox function for displying spectrogram of a music file
function spec { sox "$@" -n spectrogram -t "$@"; }


# fix offset of lossless music files
function ofix { ${CDRIP_TOOLS_PREFIX}/fixoffset.py -f flac $1 *."${2:-flac}"; }


# burn iso to usb using diskdestroyer
function writeusb { sudo dd bs=4M if=$1 of=$2 status=progress oflag=sync; }

# extract archives
function ex {
  if [ -f "${1}" ] ; then
    case "${1}" in
      *.tar.bz2)   tar xjf "${1}"   ;;
      *.tar.gz)    tar xzf "${1}"   ;;
      *.tar.xz)    tar -xf "${1}"   ;;
      *.bz2)       bunzip2 "${1}"   ;;
      *.rar)       unrar x "${1}"   ;;
      *.gz)        gunzip "${1}"    ;;
      *.tar)       tar xf "${1}"    ;;
      *.tbz2)      tar xjf "${1}"   ;;
      *.tgz)       tar xzf "${1}"   ;;
      *.zip)       unzip "${1}"     ;;
      *.Z)         uncompress "${1}";;
      *.7z)        7z x "${1}"      ;;
      *)           echo "'${1}' cannot be extracted via ex()" ;;
    esac
  else
    echo "'${1}' is not a valid file"
  fi
}

# get last n packages installed, defaults to 5
function lastni {
    grep -i installed /var/log/pacman.log | tail -n${1:-5}
}

# get last n removed packages, defaults to 5
function lastnr {
    grep -i removed /var/log/pacman.log | tail -n${1:-5}
}

# split one flac into multiple files using cuesheet info
# source: https://unix.stackexchange.com/questions/10251/how-do-i-split-a-flac-with-a-cue
function cuesplit {
    shnsplit -f "${1}" -t "${2:-"%n - %t"}" -o flac "${1%.*}.flac"
}


# must be used as yp <name> and will list all packages that match name
function yp {
    yay -Q | grep ${1}
}

# backup files in directory $1 to $2
function rsync_backup {
    rsync -r -t -v --progress --delete -s "${1}" "${2}"
}

# download a section A-B of a youtube video as audio using yt-dlp
# usage: yta_section <video url> <section of video as "start_timestamp-end_timestamp">
function yta_section {
    yt-dlp --extract-audio --audio-format best --audio-quality 0 --add-metadata \
        --xattrs --embed-thumbnail --force-keyframes-at-cuts --download-sections "*${2}" "${1}"
}


function audio_stats {
    cat /proc/asound/${1}/pcm0p/sub0/hw_params
}


function switch {
    eval $(opam env --switch=${1} --set-switch)
}
